name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: STINNEWS          # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # path to your web app project
  DOTNET_VERSION: '8.0.x'
  AI_API_KEY: ${{ secrets.AI_API_KEY }}
  AI_API_KEY_TEST_1_FULL: ${{ secrets.AI_API_KEY_TEST_1_FULL }}
  AI_API_URL: ${{ secrets.AI_API_URL }}
  BURZA_URL: ${{ secrets.BURZA_URL }}
  DEVELOPMENT_MODE: ${{ secrets.DEVELOPMENT_MODE }}
  MAX_ARTICLES: ${{ secrets.MAX_ARTICLES }}
  MIN_ARTICLE_NUM: ${{ secrets.MIN_ARTICLE_NUM }}
  NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
  NUM_OF_DAYS: ${{ secrets.NUM_OF_DAYS }}
  PORT: ${{ secrets.PORT }}
  AZURE_WEBAPP_PUBLISH_PROFILE: <publishData><publishProfile profileName="STINNEWS - Web Deploy" publishMethod="MSDeploy" publishUrl="stinnews-cpaeakbfgkdpe0ae.scm.westeurope-01.azurewebsites.net:443" msdeploySite="STINNEWS" userName="$STINNEWS" userPWD="vKGESsdxSjntaohKhdajZhbjwyYf8bkYy8TfvyXAwsCJMTPZtjYMF7QCgk6c" destinationAppUrl="https://stinnews-cpaeakbfgkdpe0ae.westeurope-01.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="https://portal.azure.com" webSystem="WebSites"><databases /></publishProfile><publishProfile profileName="STINNEWS - FTP" publishMethod="FTP" publishUrl="ftp://waws-prod-am2-443.ftp.azurewebsites.windows.net/site/wwwroot" ftpPassiveMode="True" userName="STINNEWS\$STINNEWS" userPWD="vKGESsdxSjntaohKhdajZhbjwyYf8bkYy8TfvyXAwsCJMTPZtjYMF7QCgk6c" destinationAppUrl="https://stinnews-cpaeakbfgkdpe0ae.westeurope-01.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="https://portal.azure.com" webSystem="WebSites"><databases /></publishProfile><publishProfile profileName="STINNEWS - Zip Deploy" publishMethod="ZipDeploy" publishUrl="stinnews-cpaeakbfgkdpe0ae.scm.westeurope-01.azurewebsites.net:443" userName="$STINNEWS" userPWD="vKGESsdxSjntaohKhdajZhbjwyYf8bkYy8TfvyXAwsCJMTPZtjYMF7QCgk6c" destinationAppUrl="https://stinnews-cpaeakbfgkdpe0ae.westeurope-01.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="https://portal.azure.com" webSystem="WebSites"><databases /></publishProfile></publishData>
  

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ./publish_output

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ./publish_output

  deploy:
    name: ðŸš€ Deploy to Azure
    runs-on: windows-latest
    needs: build

    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app   # must match the uploaded artifact name
          path: ./artifact   # folder where the artifact will be downloaded

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ env.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./publish_output

  test-and-coverage:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore STIN_News_Module_Test/STIN_News_Module_Test.csproj

      - name: Build tests
        run: dotnet build STIN_News_Module_Test/STIN_News_Module_Test.csproj --configuration Release --no-restore

      - name: Run tests with coverage
        run: dotnet test STIN_News_Module_Test/STIN_News_Module_Test.csproj --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
        with:
          reports: '**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline_AzurePipelines'

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport
