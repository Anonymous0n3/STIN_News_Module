@page
@model UserDashboardModel
@{
    ViewData["Title"] = "Uživatelský panel";
}

<h2>Uživatelský panel</h2>

<div class="row">
    <!-- LOGY -->
    <div class="col-md-6">
        <h4>Živé logy systému</h4>
        <div id="logContainer" style="background-color: #111; color: #0f0; padding: 10px; height: 400px; overflow-y: scroll; font-family: monospace;">
            <p>[12:00:01] Volám endpoint /getStockData</p>
            <p>[12:00:01] Posílám JSON: ["Microsoft","Google"]</p>
            <p>[12:00:02] Získaná data: {...}</p>
            <p>[12:00:03] Posílám zprávy modulu Zprávy...</p>
        </div>
    </div>

    <!-- PORTFOLIO -->
    <div class="col-md-6">
        <h4>Moje portfolio</h4>
        <p>Celkový počet položek: <strong>@Model.Stocks.Count</strong></p>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Název</th>
                    <th>Datum</th>
                    <th>Hodnocení</th>
                    <th>Doporučení</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stock in Model.Stocks)
                {
                    <tr>
                        <td>@stock.Name</td>
                        <td>@stock.Date.ToString("dd.MM.yyyy")</td>
                        <td>@stock.Rating</td>
                        <td>@(stock.Sell == 1 ? "Prodat" : "Držet")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        async function fetchLogs() {
            const logContainer = document.getElementById("logContainer");

            try {
                const response = await fetch('/Api/Logs');

                if (!response.ok) {
                    const p = document.createElement('p');
                    p.textContent = "spadla klec";
                    p.style.color = "red";
                    logContainer.appendChild(p);
                    return;
                }

                const logs = await response.json();
                logContainer.innerHTML = ''; // smaže staré logy

                for (let line of logs) {
                    const p = document.createElement('p');
                    p.textContent = line;
                    logContainer.appendChild(p);
                }

                logContainer.scrollTop = logContainer.scrollHeight;

            } catch (error) {
                const p = document.createElement('p');
                p.textContent = "spadla klec (výjimka)";
                p.style.color = "red";
                logContainer.appendChild(p);
            }
        }

        // Spouštět každých 5 sekund
        setInterval(fetchLogs, 5000);
        // Načíst hned při načtení
        fetchLogs();
    </script>
}
